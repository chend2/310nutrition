<!-- /templates/product.liquid -->
{% include 'bold-product' with product, hide_action: 'break' %}{% if bold_hidden_product %}{% break %}{%endif %}

{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}
{% comment %}
<div class="collection">
  <div class="hero">
    <div class="products-heading">
      <img src="{{ '310-thin-banner-image.png' | asset_url}}" alt="310 Thin">
      <h1>$46 VALUE 310THIN<br><span class="free">FREE<br></span><span class="with-any">WITH ANY PURCHASE OF<br></span><span class="dollars-or-more">$99 OR MORE</span></h1>
    </div>
  </div>
</div>
{% endcomment %}
<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  <div class="grid">
    <div class="grid__item large--two-thirds push--large--one-sixth">
      {% include 'breadcrumb' %}

      <div class="grid product-single">
        <div class="grid__item large--one-half text-center">
          <div class="product-single__photos 2" id="ProductPhoto">
            {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
            
            
            {% if bold_variants_size > 1 %}
              {% for variant in product.variants %}
              {% include 'bold-hidden-variants' with variant, bold_loop: 'loop' %}
               

              {% endfor %}
              <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
            {% else %}
              
              <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
              
            {% endif %}  

          </div>

          
        </div>

        <div class="grid__item large--one-half product-info">

          <h1 itemprop="name">{{ product.title }}</h1>
          {% unless product.tags contains 'singular' %}  
              <p class="product-quick-description">{{ product.tags }}</p>
			{% endunless %}
         
          <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
            <meta itemprop="priceCurrency" content="{{ shop.currency }}">

            <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

            {% comment %}
              ID addToCartForm is a selector for the ajax cart plugin
            {% endcomment %}
            <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical" data-productid="{{product.id}}">
            {% if product.available %}{% include 'subscription-product' %}{% endif %}

              {% comment %}
                Add product variants as a dropdown.
                  - By default, each variant (or combination of variants) will display as its own <option>
                  - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                You can leverage jQuery to add a callback on page load and each time the select element changes:
                  - Include option_selection.js (as seen at the bottom of this file)
                  - This allows you to use JavaScript anytime the variant dropdown changes
                  - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                For more information on products with multiple options, visit:
                  - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
              {% endcomment %}
              {% if bold_variants_size > 1 %}
                
                  
                  <select name="id" id="productSelect" class="product-single__variants" data-productid="{{product.id}}">
                    {% for variant in product.variants %}
                      {% if variant.available %}

                        {% comment %}
                          Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                        {% endcomment %}
                        <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

                      {% else %}
                        <option disabled="disabled">
                          {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                        </option>
                      {% endif %}
                    {% endfor %}
                  </select>  
              {% else %}
                <input type="hidden" name="id" value="{{ product.variants.first.id }}" id="variant-{{ variant.id }}" data-productid="{{product.id}}" />
              {% endif %}

              <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
              <span id="ProductPrice" class="h2" itemprop="price" content="{{ current_variant.price | divided_by: 100 }}">
                {{ current_variant.price | money }}
              </span>

              {% if product.compare_at_price_max > product.price %}
                <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
                <p id="ComparePrice">
                  {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
                </p>
              {% endif %}
			{% if product.available %}
              {% unless product.tags contains 'singular' %}  
              <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
              <div class="product-quantity-box quantity-selector">      
              <span class="product-minus" data-func="minus">-</span>
              <input type="text" min="1" size="1" class="quantity" name="quantity" id="quantity" value="1">
              <span class="product-plus" data-func="plus">+</span>
              </div>
              <script>
                $(".product-minus").click(function() {
                  var currentVal = parseInt($("#quantity").val());
                  if (!isNaN(currentVal) && currentVal > 0) {
                    $("#quantity").val(currentVal - 1);
                  }
                });
                $(".product-plus").click(function() {
                  var currentVal = parseInt($("#quantity").val());
                  if (!isNaN(currentVal)) {
                    $("#quantity").val(currentVal + 1);
                  }
                });
              </script>
			  {% endunless %}
              <button type="submit" name="add" id="AddToCart" class="btn">
                <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
              </button>      
              {% else %}        
              <button type="button" id="SoldOut" class="btn sold">
                <span id="SoldOutText">Sold Out</span>
              </button>
            {% endif %}        
            </form>
          </div>

          {% comment %}
            If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
            in the URL, we can show next/previous links to other products in the collection.
          {% endcomment %}
          {% if collection %}
            {% if collection.previous_product or collection.next_product %}
              <p>
                {% if collection.previous_product %}
                  <span class="left">
                    {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
                  </span>
                {% endif %}
                {% if collection.next_product %}
                  <span class="right">
                    {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
                  </span>
                {% endif %}
              </p>
            {% endif %}
          {% endif %}



        </div>
        <div class="grid__item">
          <div class="product-description rte" itemprop="description">
            {% unless bundle_loaded == 'true' %}
  			{% include 'shappify-bdl-load-bundle' %}
  			{% assign bundle_loaded = 'true' %}
			{% endunless %}            
            {{ product.description }}
            {% comment %}
            {{ product.metafields.product.nutrition-fact }} <br/>
            {{ product.metafields.product.nutritional-benefits }} <br/>
            {{ product.metafields.product.faqs }} <br/>
            {% endcomment %}
           
          </div>
        </div>
        <div class="grid__item success-stories">
          {% for article in blogs["success-stories"].articles limit: 3 %}
            <div class="grid__item large--one-third one-whole success-story">
              <div class="weight-loss">LOST {% for tag in article.tags %}{{tag}}{% endfor %} <span class="pounds">Lbs*</span></div>
              <img src="{{ article | img_url: 'medium' }}" alt="">
              <a href="../pages/success-stories" >{{article.title}}'s Story ></a>
            </div>
          {% endfor %}
        </div>
      </div>
      </div>
  </div>
</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: bold_product_json[{{ product.id }}],
      onVariantSelected: selectCallback,
      enableHistoryState: false
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if bold_variants_size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });



</script>

<script>
  $(document).ready(function(){
    var initialImage = '#image_' + $("input[type='radio']:checked").attr('value');
    $('.flavors').hide();
    $(initialImage).show();

    $('input:radio[name=id]').click(function(){
      $('.flavors').hide();
      $("input[type='radio']:checked").each(function() {
        var id = $(this).attr('id');
        id = id.replace('radio_','image_');
        $('#'+id).show();
      });
    })
  })
    
</script>
<!-- brontoBrowseObject:start -->
<script>
  (function(window) {
    var BROWSE_PRODUCT = "brontoBrowseObject";
    window[BROWSE_PRODUCT] = {
      product: bold_product_json[{{ product.id }}]
    };
  })(window);
</script>
<!-- brontoBrowseObject:end -->


